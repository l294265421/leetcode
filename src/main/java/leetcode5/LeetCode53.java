package leetcode5;

public class LeetCode53 {
	/**
	 * 从中心开始
	 * @param s
	 * @return
	 */
    public String longestPalindrome(String s) {
    	String longestPalindrome = "";
    	int maxLen = 0;
    	
    	int len = s.length();
    	for(int i = 0; i < len; i++) {
    		int length = 0;
    		
    		// 回文字符串长度为奇数
    		int j = i;
    		int k = i;
    		while (j >= 0 && k <= len - 1 && s.charAt(j) == s.charAt(k)) {
				j--;
				k++;
			}
    		length = k - j - 1;
    		if (length > maxLen) {
				longestPalindrome = s.substring(j + 1, k);
				maxLen = length;
			}
    		
    		// 回文字符串长度为偶数
    		j = i;
    		k = i + 1;
    		while (j >= 0 && k <= len - 1 && s.charAt(j) == s.charAt(k)) {
				j--;
				k++;
			}
    		length = k - j - 1;
    		if (length > maxLen) {
				longestPalindrome = s.substring(j + 1, k);
				maxLen = length;
			}
    	}
    	
        return longestPalindrome;
    }
    
	public static void main(String[] args) {
		LeetCode53 leetCode5 = new LeetCode53();
		long start = System.currentTimeMillis();
		System.out.println(leetCode5.longestPalindrome
		System.out.println(System.currentTimeMillis() - start);
	}
}
